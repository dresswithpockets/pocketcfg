//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Res.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class ResParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LBRACKET=1, RBRACKET=2, LBRACE=3, RBRACE=4, EXCL=5, COMMENT=6, DIRECTIVE=7, 
		FLAG=8, STRING_LITERAL=9, IDENT=10, NEWLINE=11, WS=12;
	public const int
		RULE_translationUnit = 0, RULE_objectList = 1, RULE_name = 2, RULE_flagSpecifier = 3, 
		RULE_object = 4, RULE_objectBody = 5;
	public static readonly string[] ruleNames = {
		"translationUnit", "objectList", "name", "flagSpecifier", "object", "objectBody"
	};

	private static readonly string[] _LiteralNames = {
		null, "'['", "']'", "'{'", "'}'", "'!'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LBRACKET", "RBRACKET", "LBRACE", "RBRACE", "EXCL", "COMMENT", "DIRECTIVE", 
		"FLAG", "STRING_LITERAL", "IDENT", "NEWLINE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Res.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ResParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ResParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ResParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class TranslationUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIRECTIVE() { return GetTokens(ResParser.DIRECTIVE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTIVE(int i) {
			return GetToken(ResParser.DIRECTIVE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectContext[] @object() {
			return GetRuleContexts<ObjectContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectContext @object(int i) {
			return GetRuleContext<ObjectContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(ResParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(ResParser.NEWLINE, i);
		}
		public TranslationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_translationUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IResListener typedListener = listener as IResListener;
			if (typedListener != null) typedListener.EnterTranslationUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IResListener typedListener = listener as IResListener;
			if (typedListener != null) typedListener.ExitTranslationUnit(this);
		}
	}

	[RuleVersion(0)]
	public TranslationUnitContext translationUnit() {
		TranslationUnitContext _localctx = new TranslationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_translationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 21;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DIRECTIVE) | (1L << STRING_LITERAL) | (1L << IDENT) | (1L << NEWLINE))) != 0)) {
				{
				{
				State = 13;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NEWLINE) {
					{
					State = 12;
					Match(NEWLINE);
					}
				}

				State = 17;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DIRECTIVE:
					{
					State = 15;
					Match(DIRECTIVE);
					}
					break;
				case STRING_LITERAL:
				case IDENT:
					{
					State = 16;
					@object();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				State = 23;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ObjectContext[] @object() {
			return GetRuleContexts<ObjectContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectContext @object(int i) {
			return GetRuleContext<ObjectContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(ResParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(ResParser.NEWLINE, i);
		}
		public ObjectListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IResListener typedListener = listener as IResListener;
			if (typedListener != null) typedListener.EnterObjectList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IResListener typedListener = listener as IResListener;
			if (typedListener != null) typedListener.ExitObjectList(this);
		}
	}

	[RuleVersion(0)]
	public ObjectListContext objectList() {
		ObjectListContext _localctx = new ObjectListContext(Context, State);
		EnterRule(_localctx, 2, RULE_objectList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 30;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 25;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NEWLINE) {
						{
						State = 24;
						Match(NEWLINE);
						}
					}

					State = 27;
					@object();
					}
					} 
				}
				State = 32;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(ResParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(ResParser.STRING_LITERAL, 0); }
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IResListener typedListener = listener as IResListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IResListener typedListener = listener as IResListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 4, RULE_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			_la = TokenStream.LA(1);
			if ( !(_la==STRING_LITERAL || _la==IDENT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlagSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(ResParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLAG() { return GetToken(ResParser.FLAG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(ResParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCL() { return GetToken(ResParser.EXCL, 0); }
		public FlagSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flagSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IResListener typedListener = listener as IResListener;
			if (typedListener != null) typedListener.EnterFlagSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IResListener typedListener = listener as IResListener;
			if (typedListener != null) typedListener.ExitFlagSpecifier(this);
		}
	}

	[RuleVersion(0)]
	public FlagSpecifierContext flagSpecifier() {
		FlagSpecifierContext _localctx = new FlagSpecifierContext(Context, State);
		EnterRule(_localctx, 6, RULE_flagSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35;
			Match(LBRACKET);
			State = 37;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXCL) {
				{
				State = 36;
				Match(EXCL);
				}
			}

			State = 39;
			Match(FLAG);
			State = 40;
			Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectBodyContext objectBody() {
			return GetRuleContext<ObjectBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlagSpecifierContext flagSpecifier() {
			return GetRuleContext<FlagSpecifierContext>(0);
		}
		public ObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IResListener typedListener = listener as IResListener;
			if (typedListener != null) typedListener.EnterObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IResListener typedListener = listener as IResListener;
			if (typedListener != null) typedListener.ExitObject(this);
		}
	}

	[RuleVersion(0)]
	public ObjectContext @object() {
		ObjectContext _localctx = new ObjectContext(Context, State);
		EnterRule(_localctx, 8, RULE_object);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			name();
			State = 44;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACKET) {
				{
				State = 43;
				flagSpecifier();
				}
			}

			State = 46;
			objectBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(ResParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(ResParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(ResParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(ResParser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectListContext objectList() {
			return GetRuleContext<ObjectListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(ResParser.RBRACE, 0); }
		public ObjectBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IResListener typedListener = listener as IResListener;
			if (typedListener != null) typedListener.EnterObjectBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IResListener typedListener = listener as IResListener;
			if (typedListener != null) typedListener.ExitObjectBody(this);
		}
	}

	[RuleVersion(0)]
	public ObjectBodyContext objectBody() {
		ObjectBodyContext _localctx = new ObjectBodyContext(Context, State);
		EnterRule(_localctx, 10, RULE_objectBody);
		int _la;
		try {
			State = 58;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 48;
				Match(STRING_LITERAL);
				}
				break;
			case LBRACE:
			case NEWLINE:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 50;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NEWLINE) {
					{
					State = 49;
					Match(NEWLINE);
					}
				}

				State = 52;
				Match(LBRACE);
				State = 53;
				Match(NEWLINE);
				State = 54;
				objectList();
				State = 55;
				Match(NEWLINE);
				State = 56;
				Match(RBRACE);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\xE', '?', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x3', '\x2', '\x5', '\x2', 
		'\x10', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', '\x14', 
		'\n', '\x2', '\a', '\x2', '\x16', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 
		'\x19', '\v', '\x2', '\x3', '\x3', '\x5', '\x3', '\x1C', '\n', '\x3', 
		'\x3', '\x3', '\a', '\x3', '\x1F', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 
		'\"', '\v', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x5', '\x5', '(', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '/', '\n', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x35', '\n', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', '=', '\n', '\a', '\x3', '\a', '\x2', '\x2', '\b', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\x2', '\x3', '\x3', '\x2', '\v', '\f', 
		'\x2', '\x41', '\x2', '\x17', '\x3', '\x2', '\x2', '\x2', '\x4', ' ', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '#', '\x3', '\x2', '\x2', '\x2', '\b', 
		'%', '\x3', '\x2', '\x2', '\x2', '\n', ',', '\x3', '\x2', '\x2', '\x2', 
		'\f', '<', '\x3', '\x2', '\x2', '\x2', '\xE', '\x10', '\a', '\r', '\x2', 
		'\x2', '\xF', '\xE', '\x3', '\x2', '\x2', '\x2', '\xF', '\x10', '\x3', 
		'\x2', '\x2', '\x2', '\x10', '\x13', '\x3', '\x2', '\x2', '\x2', '\x11', 
		'\x14', '\a', '\t', '\x2', '\x2', '\x12', '\x14', '\x5', '\n', '\x6', 
		'\x2', '\x13', '\x11', '\x3', '\x2', '\x2', '\x2', '\x13', '\x12', '\x3', 
		'\x2', '\x2', '\x2', '\x14', '\x16', '\x3', '\x2', '\x2', '\x2', '\x15', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\x16', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\x17', '\x15', '\x3', '\x2', '\x2', '\x2', '\x17', '\x18', '\x3', 
		'\x2', '\x2', '\x2', '\x18', '\x3', '\x3', '\x2', '\x2', '\x2', '\x19', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x1C', '\a', '\r', '\x2', 
		'\x2', '\x1B', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x1C', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x1D', 
		'\x1F', '\x5', '\n', '\x6', '\x2', '\x1E', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\x1F', '\"', '\x3', '\x2', '\x2', '\x2', ' ', '\x1E', '\x3', '\x2', 
		'\x2', '\x2', ' ', '!', '\x3', '\x2', '\x2', '\x2', '!', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '\"', ' ', '\x3', '\x2', '\x2', '\x2', '#', '$', 
		'\t', '\x2', '\x2', '\x2', '$', '\a', '\x3', '\x2', '\x2', '\x2', '%', 
		'\'', '\a', '\x3', '\x2', '\x2', '&', '(', '\a', '\a', '\x2', '\x2', '\'', 
		'&', '\x3', '\x2', '\x2', '\x2', '\'', '(', '\x3', '\x2', '\x2', '\x2', 
		'(', ')', '\x3', '\x2', '\x2', '\x2', ')', '*', '\a', '\n', '\x2', '\x2', 
		'*', '+', '\a', '\x4', '\x2', '\x2', '+', '\t', '\x3', '\x2', '\x2', '\x2', 
		',', '.', '\x5', '\x6', '\x4', '\x2', '-', '/', '\x5', '\b', '\x5', '\x2', 
		'.', '-', '\x3', '\x2', '\x2', '\x2', '.', '/', '\x3', '\x2', '\x2', '\x2', 
		'/', '\x30', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\x5', '\f', 
		'\a', '\x2', '\x31', '\v', '\x3', '\x2', '\x2', '\x2', '\x32', '=', '\a', 
		'\v', '\x2', '\x2', '\x33', '\x35', '\a', '\r', '\x2', '\x2', '\x34', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x35', '\x36', '\x3', '\x2', '\x2', '\x2', '\x36', '\x37', '\a', 
		'\x5', '\x2', '\x2', '\x37', '\x38', '\a', '\r', '\x2', '\x2', '\x38', 
		'\x39', '\x5', '\x4', '\x3', '\x2', '\x39', ':', '\a', '\r', '\x2', '\x2', 
		':', ';', '\a', '\x6', '\x2', '\x2', ';', '=', '\x3', '\x2', '\x2', '\x2', 
		'<', '\x32', '\x3', '\x2', '\x2', '\x2', '<', '\x34', '\x3', '\x2', '\x2', 
		'\x2', '=', '\r', '\x3', '\x2', '\x2', '\x2', '\v', '\xF', '\x13', '\x17', 
		'\x1B', ' ', '\'', '.', '\x34', '<',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
