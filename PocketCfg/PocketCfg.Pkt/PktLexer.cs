//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Pkt.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class PktLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, STRING_LIT=2, IDENT=3, NUMBER=4, NL=5, WS=6;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "Quote", "STRING_LIT", "IDENT", "NUMBER", "NL", "WS"
	};


	public PktLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public PktLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "STRING_LIT", "IDENT", "NUMBER", "NL", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Pkt.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static PktLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\b', '\x42', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\a', '\x4', '\x18', '\n', '\x4', '\f', '\x4', '\xE', 
		'\x4', '\x1B', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\a', '\x5', '!', '\n', '\x5', '\f', '\x5', '\xE', '\x5', 
		'$', '\v', '\x5', '\x3', '\x6', '\x5', '\x6', '\'', '\n', '\x6', '\x3', 
		'\x6', '\a', '\x6', '*', '\n', '\x6', '\f', '\x6', '\xE', '\x6', '-', 
		'\v', '\x6', '\x3', '\x6', '\x5', '\x6', '\x30', '\n', '\x6', '\x3', '\x6', 
		'\x6', '\x6', '\x33', '\n', '\x6', '\r', '\x6', '\xE', '\x6', '\x34', 
		'\x3', '\a', '\x6', '\a', '\x38', '\n', '\a', '\r', '\a', '\xE', '\a', 
		'\x39', '\x3', '\b', '\x6', '\b', '=', '\n', '\b', '\r', '\b', '\xE', 
		'\b', '>', '\x3', '\b', '\x3', '\b', '\x3', '\x19', '\x2', '\t', '\x3', 
		'\x3', '\x5', '\x2', '\a', '\x4', '\t', '\x5', '\v', '\x6', '\r', '\a', 
		'\xF', '\b', '\x3', '\x2', '\n', '\x4', '\x2', '$', '$', ')', ')', '\x5', 
		'\x2', '\x43', '\\', '\x61', '\x61', '\x63', '|', '\x6', '\x2', '\x32', 
		';', '\x43', '\\', '\x61', '\x61', '\x63', '|', '\x4', '\x2', '-', '-', 
		'/', '/', '\x3', '\x2', '\x32', ';', '\x3', '\x2', '\x30', '\x30', '\x4', 
		'\x2', '\f', '\f', '\xF', '\xF', '\x4', '\x2', '\v', '\v', '\"', '\"', 
		'\x2', 'H', '\x2', '\x3', '\x3', '\x2', '\x2', '\x2', '\x2', '\a', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\t', '\x3', '\x2', '\x2', '\x2', '\x2', '\v', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\r', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\x3', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\x5', '\x13', '\x3', '\x2', '\x2', '\x2', '\a', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\t', '\x1E', '\x3', '\x2', '\x2', '\x2', '\v', '&', 
		'\x3', '\x2', '\x2', '\x2', '\r', '\x37', '\x3', '\x2', '\x2', '\x2', 
		'\xF', '<', '\x3', '\x2', '\x2', '\x2', '\x11', '\x12', '\a', '=', '\x2', 
		'\x2', '\x12', '\x4', '\x3', '\x2', '\x2', '\x2', '\x13', '\x14', '\t', 
		'\x2', '\x2', '\x2', '\x14', '\x6', '\x3', '\x2', '\x2', '\x2', '\x15', 
		'\x19', '\x5', '\x5', '\x3', '\x2', '\x16', '\x18', '\v', '\x2', '\x2', 
		'\x2', '\x17', '\x16', '\x3', '\x2', '\x2', '\x2', '\x18', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\x19', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x19', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x1C', '\x3', '\x2', '\x2', 
		'\x2', '\x1B', '\x19', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1D', '\x5', 
		'\x5', '\x3', '\x2', '\x1D', '\b', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\"', '\t', '\x3', '\x2', '\x2', '\x1F', '!', '\t', '\x4', '\x2', '\x2', 
		' ', '\x1F', '\x3', '\x2', '\x2', '\x2', '!', '$', '\x3', '\x2', '\x2', 
		'\x2', '\"', ' ', '\x3', '\x2', '\x2', '\x2', '\"', '#', '\x3', '\x2', 
		'\x2', '\x2', '#', '\n', '\x3', '\x2', '\x2', '\x2', '$', '\"', '\x3', 
		'\x2', '\x2', '\x2', '%', '\'', '\t', '\x5', '\x2', '\x2', '&', '%', '\x3', 
		'\x2', '\x2', '\x2', '&', '\'', '\x3', '\x2', '\x2', '\x2', '\'', '/', 
		'\x3', '\x2', '\x2', '\x2', '(', '*', '\t', '\x6', '\x2', '\x2', ')', 
		'(', '\x3', '\x2', '\x2', '\x2', '*', '-', '\x3', '\x2', '\x2', '\x2', 
		'+', ')', '\x3', '\x2', '\x2', '\x2', '+', ',', '\x3', '\x2', '\x2', '\x2', 
		',', '.', '\x3', '\x2', '\x2', '\x2', '-', '+', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x30', '\t', '\a', '\x2', '\x2', '/', '+', '\x3', '\x2', '\x2', 
		'\x2', '/', '\x30', '\x3', '\x2', '\x2', '\x2', '\x30', '\x32', '\x3', 
		'\x2', '\x2', '\x2', '\x31', '\x33', '\t', '\x6', '\x2', '\x2', '\x32', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\x3', '\x2', '\x2', 
		'\x2', '\x34', '\x32', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\x35', '\f', '\x3', '\x2', '\x2', '\x2', '\x36', 
		'\x38', '\t', '\b', '\x2', '\x2', '\x37', '\x36', '\x3', '\x2', '\x2', 
		'\x2', '\x38', '\x39', '\x3', '\x2', '\x2', '\x2', '\x39', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\x39', ':', '\x3', '\x2', '\x2', '\x2', ':', '\xE', 
		'\x3', '\x2', '\x2', '\x2', ';', '=', '\t', '\t', '\x2', '\x2', '<', ';', 
		'\x3', '\x2', '\x2', '\x2', '=', '>', '\x3', '\x2', '\x2', '\x2', '>', 
		'<', '\x3', '\x2', '\x2', '\x2', '>', '?', '\x3', '\x2', '\x2', '\x2', 
		'?', '@', '\x3', '\x2', '\x2', '\x2', '@', '\x41', '\b', '\b', '\x2', 
		'\x2', '\x41', '\x10', '\x3', '\x2', '\x2', '\x2', '\v', '\x2', '\x19', 
		'\"', '&', '+', '/', '\x34', '\x39', '>', '\x3', '\x2', '\x3', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
